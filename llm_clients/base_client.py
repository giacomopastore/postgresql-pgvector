# llm_clients/base_client.py

class LLMClient:
    """
    Base class for LLM clients.
    
    :param model: Name of the model to use.
    """

    def __init__(self, model):
        self.model = model

    def generate(self, prompt, max_tokens=50):
        """
        Abstract method to generate text.
        
        :param prompt: Text input for the model.
        :param max_tokens: Maximum number of tokens for the response.
        :return: Generated response from the model.
        """
        raise NotImplementedError("This method should be implemented in subclasses.")

    def embedding(self, text):
        """
        Abstract method to get embeddings.
        
        :param text: Input text for generating embeddings.
        :return: Embedding generated by the model.
        """
        raise NotImplementedError("This method should be implemented in subclasses.")